package ug.ktrusilo.techut.zad03.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import ug.ktrusilo.techut.zad03.jdbcdemo.customexception.WardrobeNameUniqueConstraint;
import ug.ktrusilo.techut.zad03.jdbcdemo.domain.Wardrobe;

import java.sql.Date;

public class WardrobeServiceJDBC implements WardrobeService{
	final static String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private final String INSERT_PSTMT="INSERT INTO Wardrobe(name,doors,weight,releaseDate) values(?,?,?,?)";
	private final String SELECT_ALL_PSTMT="SELECT id,name,doors,weight,releaseDate from Wardrobe";
	private final String SELECT_ALL_DOORS_MORE_THAN_OR_EQUALPSTMT="SELECT id,name,doors,weight,releaseDate from Wardrobe where doors >=?";
	private final String SELECT_BY_ID_PSTMT="SELECT id,name,doors,weight,releaseDate from Wardrobe where id=?";
	private final String SELECT_BY_NAME_PSTMT="SELECT id,name,doors,weight,releaseDate from Wardrobe where name=?";
	private final String SELECT_BY_DATE_BETWEEN_PSTMT="SELECT id,name,doors,weight,releaseDate from Wardrobe where releaseDate between ? and ?";
	private final String DELETE_ALL_PSTMT="TRUNCATE TABLE WARDROBE RESTART IDENTITY AND COMMIT NO CHECK";
	private final String DELETE_BY_ID_PSTMT="DELETE FROM Wardrobe where id=?";
	private final String CREATE_TABLE_PSTMT="CREATE TABLE Wardrobe(id int GENERATED BY DEFAULT AS IDENTITY, name varchar(50) unique,doors int, weight double, releaseDate date)";
	
	private Connection connection =  null;
	private PreparedStatement insertPstmt;
	private PreparedStatement selectAllPstmt;
	private PreparedStatement selectAllDoorsMoreThanOrEqualPstmt;
	private PreparedStatement selectByIdPstmt;
	private PreparedStatement selectByNamePstmt;
	private PreparedStatement deleteAllPstmt;
	private PreparedStatement deleteByIdPstmt;
	private PreparedStatement createTablePstmt;
	private PreparedStatement selectByDateBetween;
	public WardrobeServiceJDBC() {
		try {
			connection = DriverManager.getConnection(URL);
		createTablePstmt = connection.prepareStatement(CREATE_TABLE_PSTMT);
		ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
		boolean tableExists = false;
		while(rs.next())
		{
			if("Wardrobe".equalsIgnoreCase(rs.getString("table_name")))
			{
				tableExists = true;
				break;
			}
		}
		if(!tableExists)
			createTablePstmt.executeUpdate();
		
		insertPstmt = connection.prepareStatement(INSERT_PSTMT);
		selectAllPstmt = connection.prepareStatement(SELECT_ALL_PSTMT);
		selectByIdPstmt = connection.prepareStatement(SELECT_BY_ID_PSTMT);
		deleteAllPstmt = connection.prepareStatement(DELETE_ALL_PSTMT);
		deleteByIdPstmt = connection.prepareStatement(DELETE_BY_ID_PSTMT);
		selectByNamePstmt = connection.prepareStatement(SELECT_BY_NAME_PSTMT);
		selectAllDoorsMoreThanOrEqualPstmt = connection.prepareStatement(SELECT_ALL_DOORS_MORE_THAN_OR_EQUALPSTMT);
		selectByDateBetween =  connection.prepareStatement(SELECT_BY_DATE_BETWEEN_PSTMT);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	@SuppressWarnings("deprecation")
	private int addWardrobeLowLevel(Wardrobe wardrobe) throws SQLException,WardrobeNameUniqueConstraint
	{
		selectByNamePstmt.setString(1, wardrobe.getName());
		ResultSet rs = selectByNamePstmt.executeQuery();
		if(rs.isBeforeFirst())
			throw new WardrobeNameUniqueConstraint("Exists, try another name");
		
		insertPstmt.setString(1, wardrobe.getName());
		insertPstmt.setInt(2, wardrobe.getDoors());
		insertPstmt.setDouble(3, wardrobe.getWeight());
		wardrobe.getDate().setYear(wardrobe.getDate().getYear()-1900);
		insertPstmt.setDate(4, wardrobe.getDate());
		return insertPstmt.executeUpdate();
	}
	public boolean addWardrobe(Wardrobe wardrobe)
	{
		try {
		int result = addWardrobeLowLevel(wardrobe);
		if(result==1) return true;
		} catch(SQLException ex)
		{
			ex.printStackTrace();
		} catch(WardrobeNameUniqueConstraint ps)
		{
			ps.printStackTrace();
		}
		return false;
	}
	@Override
	public boolean addAllWardrobes(List<Wardrobe> wardrobes) {
		try {
			connection.setAutoCommit(false);
			for(Wardrobe wardrobe : wardrobes)
			{
				addWardrobeLowLevel(wardrobe);
			}
			connection.commit();
		} catch (Exception e) {
			System.out.println("Back");
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e1) {
				System.out.println("Something is not quite right");
				e1.printStackTrace();
			}
		}
		
		return false;
	}
	public List<Wardrobe> getAllWardrobes()
	{
		ResultSet rs;
		List<Wardrobe> list = new ArrayList<>();
		try {
			rs = selectAllPstmt.executeQuery();
		while(rs.next())
		{
			Wardrobe wardrobe = new Wardrobe();
			int wardrobeid = rs.getInt("id");
			String name = rs.getString("name");
			int doors =  rs.getInt("doors");
			double weight = rs.getDouble("weight");
			Date date = rs.getDate("releaseDate");
			wardrobe.setName(name);
			wardrobe.setDoors(doors);
			wardrobe.setDate(date);
			wardrobe.setWeight(weight);
			wardrobe.setId(wardrobeid);
			list.add(wardrobe);
		}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}
	
	public List<Wardrobe> getAllWardrobesDoorsMoreThanOrEqual(int doors)
	{
		
		ResultSet rs;
		List<Wardrobe> list = new ArrayList<>();
		try {
			selectAllDoorsMoreThanOrEqualPstmt.setInt(1, doors);
			rs = selectAllDoorsMoreThanOrEqualPstmt.executeQuery();
		while(rs.next())
		{
			Wardrobe wardrobe = new Wardrobe();
			int wardrobeid = rs.getInt("id");
			String name = rs.getString("name");
			int doorss =  rs.getInt("doors");
			double weight = rs.getDouble("weight");
			Date date = rs.getDate("releaseDate");
			wardrobe.setName(name);
			wardrobe.setDoors(doorss);
			wardrobe.setDate(date);
			wardrobe.setWeight(weight);
			wardrobe.setId(wardrobeid);
			list.add(wardrobe);
		}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}
	
	@SuppressWarnings("deprecation")
	public List<Wardrobe> getAllWardrobesDateBetween(Date d1, Date d2)
	{
		
		ResultSet rs;
		List<Wardrobe> list = new ArrayList<>();
		try {
			d1.setYear(d1.getYear()-1900);
			d2.setYear(d2.getYear()-1900);
			selectByDateBetween.setDate(1, d1);
			selectByDateBetween.setDate(2, d2);
			rs = selectByDateBetween.executeQuery();
		while(rs.next())
		{
			Wardrobe wardrobe = new Wardrobe();
			int wardrobeid = rs.getInt("id");
			String name = rs.getString("name");
			int doors =  rs.getInt("doors");
			double weight = rs.getDouble("weight");
			Date date = rs.getDate("releaseDate");
			wardrobe.setName(name);
			wardrobe.setDoors(doors);
			wardrobe.setDate(date);
			wardrobe.setWeight(weight);
			wardrobe.setId(wardrobeid);
			list.add(wardrobe);
		}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	public Wardrobe getWardrobeById(int id)
	{
		Wardrobe wardrobe = null;
		try {
			selectByIdPstmt.setInt(1, id);
		ResultSet rs = selectByIdPstmt.executeQuery();
		wardrobe = new Wardrobe();
		while(rs.next())
		{
			int wardrobeid = rs.getInt("id");
			String name = rs.getString("name");
			int doors =  rs.getInt("doors");
			double weight = rs.getDouble("weight");
			Date date = rs.getDate("releaseDate");
			wardrobe.setName(name);
			wardrobe.setDoors(doors);
			wardrobe.setDate(date);
			wardrobe.setWeight(weight);
			wardrobe.setId(wardrobeid);
		}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return wardrobe;
	}
	public Wardrobe getWardrobeByName(String name)
	{
		Wardrobe wardrobe = null;
		try {
			selectByNamePstmt.setString(1, name);
		ResultSet rs = selectByNamePstmt.executeQuery();
		wardrobe = new Wardrobe();
		while(rs.next())
		{
			int wardrobeid = rs.getInt("id");
			String wardrobename = rs.getString("name");
			int doors =  rs.getInt("doors");
			double weight = rs.getDouble("weight");
			Date date = rs.getDate("releaseDate");
			wardrobe.setName(wardrobename);
			wardrobe.setDoors(doors);
			wardrobe.setDate(date);
			wardrobe.setWeight(weight);
			wardrobe.setId(wardrobeid);
		}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return wardrobe;
	}
	public boolean deleteAllWardrobes(){
		try {
			int result = deleteAllPstmt.executeUpdate();
			if(result>0) return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
	public boolean deleteWardrobeById(int id) {
		try {
			deleteByIdPstmt.setInt(1, id);
			int result = deleteByIdPstmt.executeUpdate();
			if(result>0) return true;
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	public Connection getConnection()
	{
		return this.connection;
	}
}
